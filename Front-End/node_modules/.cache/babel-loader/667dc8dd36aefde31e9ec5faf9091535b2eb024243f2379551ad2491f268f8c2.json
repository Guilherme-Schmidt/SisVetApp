{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lingn\\\\Documents\\\\GitHub\\\\SisVetApp\\\\Front-End\\\\src\\\\components\\\\GovEmployee\\\\AddCliente\\\\WebcamCapture.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebcamCapture(_ref) {\n  _s();\n  let {\n    onSnapshot,\n    onClose\n  } = _ref;\n  const [mediaStream, setMediaStream] = useState(null);\n  const videoRef = useRef(null); // Alterado para useRef\n  const canvasRef = useRef(null); // Alterado para useRef\n\n  useEffect(() => {\n    const startWebcamCapture = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        setMediaStream(stream);\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error(\"Erro ao acessar a webcam:\", error);\n      }\n    };\n    startWebcamCapture();\n    return () => {\n      if (mediaStream) {\n        mediaStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const takeSnapshot = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (video && canvas) {\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const imageData = canvas.toDataURL(\"image/png\");\n      onSnapshot(imageData);\n    }\n  };\n  const stopWebcamCapture = () => {\n    if (mediaStream) {\n      mediaStream.getTracks().forEach(track => track.stop());\n      setMediaStream(null);\n      onClose();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      muted: true,\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: takeSnapshot,\n      children: \"Capturar Foto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopWebcamCapture,\n      children: \"Encerrar Captura\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(WebcamCapture, \"FphA8ta+okAldbSh21ZTwAyHTco=\");\n_c = WebcamCapture;\nexport default WebcamCapture;\nvar _c;\n$RefreshReg$(_c, \"WebcamCapture\");","map":{"version":3,"names":["React","useState","useEffect","useRef","WebcamCapture","onSnapshot","onClose","mediaStream","setMediaStream","videoRef","canvasRef","startWebcamCapture","stream","navigator","mediaDevices","getUserMedia","video","current","srcObject","error","console","getTracks","forEach","track","stop","takeSnapshot","canvas","context","getContext","drawImage","width","height","imageData","toDataURL","stopWebcamCapture","display"],"sources":["C:/Users/lingn/Documents/GitHub/SisVetApp/Front-End/src/components/GovEmployee/AddCliente/WebcamCapture.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction WebcamCapture({ onSnapshot, onClose }) {\r\n  const [mediaStream, setMediaStream] = useState(null);\r\n  const videoRef = useRef(null); // Alterado para useRef\r\n  const canvasRef = useRef(null); // Alterado para useRef\r\n\r\n  useEffect(() => {\r\n    const startWebcamCapture = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n        setMediaStream(stream);\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = stream;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Erro ao acessar a webcam:\", error);\r\n      }\r\n    };\r\n\r\n    startWebcamCapture();\r\n\r\n    return () => {\r\n      if (mediaStream) {\r\n        mediaStream.getTracks().forEach(track => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const takeSnapshot = () => {\r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    if (video && canvas) {\r\n      const context = canvas.getContext(\"2d\");\r\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n      const imageData = canvas.toDataURL(\"image/png\");\r\n      onSnapshot(imageData);\r\n    }\r\n  };\r\n\r\n  const stopWebcamCapture = () => {\r\n    if (mediaStream) {\r\n      mediaStream.getTracks().forEach(track => track.stop());\r\n      setMediaStream(null);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} autoPlay muted style={{ width: \"100%\" }} />\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n      <button onClick={takeSnapshot}>Capturar Foto</button>\r\n      <button onClick={stopWebcamCapture}>Encerrar Captura</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WebcamCapture;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC;AAE3D,SAASC,aAAa,OAA0B;EAAA;EAAA,IAAzB;IAAEC,UAAU;IAAEC;EAAQ,CAAC;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMQ,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,MAAMO,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMS,kBAAkB,GAAG,YAAY;MACrC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QACzER,cAAc,CAACI,MAAM,CAAC;QACtB,IAAIH,QAAQ,CAACQ,OAAO,EAAE;UACpBR,QAAQ,CAACQ,OAAO,CAACC,SAAS,GAAGN,MAAM;QACrC;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDR,kBAAkB,EAAE;IAEpB,OAAO,MAAM;MACX,IAAIJ,WAAW,EAAE;QACfA,WAAW,CAACc,SAAS,EAAE,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE,CAAC;MACxD;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,MAAM;IACzB,MAAMT,KAAK,GAAGP,QAAQ,CAACQ,OAAO;IAC9B,MAAMS,MAAM,GAAGhB,SAAS,CAACO,OAAO;IAChC,IAAID,KAAK,IAAIU,MAAM,EAAE;MACnB,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MACvCD,OAAO,CAACE,SAAS,CAACb,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEU,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;MAC3D,MAAMC,SAAS,GAAGN,MAAM,CAACO,SAAS,CAAC,WAAW,CAAC;MAC/C5B,UAAU,CAAC2B,SAAS,CAAC;IACvB;EACF,CAAC;EAED,MAAME,iBAAiB,GAAG,MAAM;IAC9B,IAAI3B,WAAW,EAAE;MACfA,WAAW,CAACc,SAAS,EAAE,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE,CAAC;MACtDhB,cAAc,CAAC,IAAI,CAAC;MACpBF,OAAO,EAAE;IACX;EACF,CAAC;EAED,oBACE;IAAA,wBACE;MAAO,GAAG,EAAEG,QAAS;MAAC,QAAQ;MAAC,KAAK;MAAC,KAAK,EAAE;QAAEqB,KAAK,EAAE;MAAO;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eACjE;MAAQ,GAAG,EAAEpB,SAAU;MAAC,KAAK,EAAE;QAAEyB,OAAO,EAAE;MAAO;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eACtD;MAAQ,OAAO,EAAEV,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuB,eACrD;MAAQ,OAAO,EAAES,iBAAkB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA0B;EAAA;IAAA;IAAA;IAAA;EAAA,QACzD;AAEV;AAAC,GAtDQ9B,aAAa;AAAA,KAAbA,aAAa;AAwDtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}